name: CICD process 
on:
  push:
    branches:
      - develop
      - main
jobs:
  build_test_push_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-buildx-action@v2
      - name: login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set environment variables
        id: init_var
        env:
          DOCKER_REGISTRY: ghcr.io/
        run: |
          SHORT_GITHUB_SHA=${GITHUB_SHA::7}
          DOCKER_REPOSITORY=$GITHUB_ACTOR/
          TMP_IMAGE_TAG=flask-task-${GITHUB_REF_NAME}:${SHORT_GITHUB_SHA}
          TARGET_IMAGE_TAG=${DOCKER_REGISTRY}${DOCKER_REPOSITORY}${TMP_IMAGE_TAG}
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "TMP_IMAGE_TAG=$TMP_IMAGE_TAG" >> $GITHUB_ENV
          echo "TMP_IMAGE_TAG=$TMP_IMAGE_TAG" >> $GITHUB_ENV
          echo "TARGET_IMAGE_TAG=$TARGET_IMAGE_TAG" >> $GITHUB_ENV
      - name: build image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.TMP_IMAGE_TAG }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: print image
        run:
          docker images $TMP_IMAGET_TAG
      - name: test
        id: test
        if: ${{ env.GITHUB_REF_NAME == 'develop' }}
        run:
          docker run --rm $TMP_IMAGE_TAG pytest -v --cov=./
      - name: push image
        run: |
          docker tag $TMP_IMAGE_TAG $TARGET_IMAGE_TAG
          docker push $TARGET_IMAGE_TAG
  deploy_app:
    needs: build_test_push_image
    runs-on: ubuntu-latest
    steps:
      - name: deploy app
        id: deploy
        run:
          echo "deploy to dev/prod environment"
  register_monitor:
    needs: deploy_app
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run:
          echo "setup metrics and alert if monitor not set"

  